from flask import (
    Flask,
    render_template,
    redirect,
    url_for,
    request,
    session,
    flash,
    Blueprint,
)
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from models import Piece, db
import requests

bp = Blueprint("library", __name__)


@bp.route("/")
def index():
    """
    Library home page
    """
    if "user_id" not in session:
        return redirect(url_for("index.login"))

    return render_template("library/library.html")


@bp.route("/view")
def view_library():
    """
    Router for view library table
    """
    if "user_id" not in session:
        return redirect(url_for("index.login"))

    library = get_piece_all()
    return render_template("library/view_library.html", pieces=library) 


@bp.route("/add", methods=["GET", "POST"])
def add_piece():
    """
    Post/Create Piece Pipeline
    """
    if "user_id" not in session:
        return redirect(url_for("index.login"))

    if request.method == "POST":
        piece_data = {
            "title": request.form["title"],
            "composer": request.form["composer"],
            "instrumentation": request.form["instrumentation"],
            "duration": request.form["duration"],
        }

        #  CHANGE THIS!!!!!!! PORT TOO
        response = requests.post("http://127.0.0.1:8127/library/", json=piece_data)
        print()
        print(response)
        print()
        if response.status_code == 200:
            flash(f"{request.form['title']} successfully added.")
            return redirect(url_for("library.view_library"))
        elif response.status_code == 400:
            flash(response.json()["detail"])
        else:
            flash("Failed to add piece.")

    return render_template("library/add_piece.html")


@bp.route("/edit/<int:piece_id>", methods=["GET", "POST"])
def update_piece(piece_id):
    """
    Put/Update Piece Pipeline
    """
    if "user_id" not in session:
        return redirect(url_for("index.login"))

    if request.method == "POST":
        piece_data = {
            "title": request.form["title"],
            "composer": request.form["composer"],
            "instrumentation": request.form["instrumentation"],
            "duration": request.form["duration"],
        }
        #  CHANGE THIS !!!!!!
        response = requests.put(
            f"http://127.0.0.1:8127/library/{piece_id}", json=piece_data
        )
        if response.status_code == 200:
            flash("Piece updated successfully.")
            return redirect(url_for("library.view_library"))

        elif response.status_code == 400:
            flash(response.json()["detail"])
        else:
            flash("Failed to update piece.")

    piece = get_piece_id(piece_id)
    
    return render_template("library/edit_piece.html", piece=piece) 


@bp.route("/delete/<int:piece_id>", methods=["POST"])
def delete_piece(piece_id):
    """
    Delete Piece pipeline
    """
    if "user_id" not in session:
        return redirect(url_for("index.login"))
  
    if request.method == 'POST':
        response = requests.delete(f"http://127.0.0.1:8127/library/{piece_id}")
        if response.status_code == 200:
            flash("Piece deleted successfully.")
        else:
            flash("Error: Failed to delete piece.")
        return redirect(url_for("library.view_library"))
    else:
        flash("Delete operation cancelled.")
    return redirect(url_for("library.view_library"))

@bp.route("/generate", methods=["GET", "POST"])
def generate_setlist():
    """
    Returns a set list of pieces generated by the server
    TODO
    """
    return "This is a temporary set list!"


def get_piece_all():
    """
    return all pieces from the DB
    """
    try:
        response = requests.get("http://127.0.0.1:8127/library/")
        response.raise_for_status()
        return response.json()
    except requests.RequestException:
        return []


def get_piece_id(piece_id):
    """
    return piece by id from DB
    """
    try:
        response = requests.get(f"http://127.0.0.1:8127/library/{piece_id}")
        response.raise_for_status()
        return response.json()
    except requests.RequestException:
        return None
